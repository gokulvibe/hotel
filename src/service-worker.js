/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// precacheAndRoute(self.__WB_MANIFEST);


// New pre-caching
// default static file URLs generated during the build process
const staticBuildFiles = self.__WB_MANIFEST;

// extra file URLs you want to be precached
const extraPrecachedFiles = [
  "/css/demo.css",
  "/css/custom-css.min.css",
  "/css/font-awesome.min.css",
  "/css/left-align-menu.css",
  "/css/modulobox.css",
  "/css/reset.css",
  "/css/responsive.css",
  "/css/section1.css",
  "/css/style.css",
  "/css/themify-icons.css",
  "/css/tooltipster.css",
  "/css/wordpress.css",
  "/css/imagesloaded.min.js",
  "/css/jquery.js",
  "/css/masonry.min.js",
  "js/plugins/loftloader/assets/css/loftloader.min.css",
  "js/plugins/elementor/assets/lib/animations/animations.min.css",
  "js/plugins/elementor/assets/css/frontend-legacy.min.css",
  "js/plugins/elementor/assets/css/frontend.min.css",
  "js/plugins/craftcoffee-elementor/assets/css/swiper.css",
  "js/plugins/craftcoffee-elementor/assets/css/justifiedGallery.css",
  "js/plugins/craftcoffee-elementor/assets/css/flickity.css",
  "js/plugins/craftcoffee-elementor/assets/css/owl.theme.default.min.css",
  "js/plugins/craftcoffee-elementor/assets/css/switchery.css",
  "js/plugins/craftcoffee-elementor/assets/css/craftcoffee-elementor.css",
  "js/plugins/craftcoffee-elementor/assets/css/craftcoffee-elementor-responsive.css",
  "js/plugins/elementor/assets/lib/font-awesome/css/fontawesome.min.css",
  "js/plugins/elementor/assets/lib/font-awesome/css/brands.min.css",
  "js/plugins/elementor/assets/lib/font-awesome/css/solid.min.css",
  "images/chefs.jpg",
  "js/ui/core.min.js",
  "js/ui/datepicker.min.js",
  "js/imagesloaded.min.js",
  "js/masonry.min.js",
  "js/plugins/craftcoffee-elementor/assets/js/jquery.lazy.js",
  "js/plugins/craftcoffee-elementor/assets/js/modulobox.js",
  "js/plugins/craftcoffee-elementor/assets/js/jquery.parallax-scroll.js",
  "js/plugins/craftcoffee-elementor/assets/js/jquery.smoove.js",
  "js/plugins/craftcoffee-elementor/assets/js/parallax.js",
  "js/plugins/craftcoffee-elementor/assets/js/jquery.sticky-kit.min.js",
  "js/plugins/craftcoffee-elementor/assets/js/craftcoffee-elementor.js",
  "js/ui/effect.min.js",
  "js/plugins/craftcoffee-elementor/assets/js/tweenmax.min.js",
  "js/plugins/waypoints.min.js",
  "js/plugins/jquery-stellar.js",
  "js/plugins/craftcoffee-elementor/assets/js/owl.carousel.min.js?ver=5.5.3",
  "js/plugins/craftcoffee-plugins.js",
  "js/plugins/craftcoffee-custom.js",
  "js/plugins/jquery-tooltipster.js",
  "js/plugins/loftloader/assets/js/loftloader.min.js",
  "js/plugins/webfont.js",
  "js/plugins/craftcoffee-elementor/assets/js/flickity.pkgd.js",
  "js/plugins/elementor/assets/js/frontend-modules.min.js",
  "js/ui/position.min.js",
  "js/plugins/elementor/assets/lib/dialog/dialog.min.js",
  "js/plugins/elementor/assets/lib/waypoints/waypoints.min.js",
  "js/plugins/elementor/assets/lib/swiper/swiper.min.js",
  "js/plugins/elementor/assets/js/frontend.min.js",
  "images/FavIcons_Logo/favicon.ico",
  "images/FavIcons_Logo/apple-touch-icon.png",
  "customImages/logo_white.png",
  "images/butter-naan.jpg",
  "images/variety-indian-food.jpeg",
  "images/event2.webp",
  "images/event1.jpg",
  "upload/icon_vintage_phone.png",
  "upload/icon_vintage_compass.png",
  "customImages/butterchicken.jpg",
  "customImages/biriyani.jpg",
  "customImages/dosa.jpg",

];

// register all assets to be precached by the service worker
precacheAndRoute([
  ...staticBuildFiles,
  ...extraPrecachedFiles.map((url) => ({ url, revision: "hey1234" }))
]);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.